// loadingScreenManager.js - Version am√©lior√©e avec meilleur timing
export class LoadingScreenManager {
    constructor() {
        this.loadingScreen = document.getElementById('loadingScreen');
        this.centralMass = document.getElementById('centralMass');
        this.explosion = document.getElementById('explosion');
        this.loadingText = document.getElementById('loadingText');
        this.progressDots = document.getElementById('progressDots');

        this.minLoadingTime = 1500; // Temps minimum par d√©faut
        this.maxLoadingTime = 8000; // Augmenter le temps maximum pour le popup
        this.popupMode = false; // Mode sp√©cial pour attendre le popup
        this.startTime = Date.now();
        this.isHidden = false;
        this.hidePromise = null; // Pour √©viter les appels multiples

        this.init();
    }

    init() {
        // S'assurer que le loading screen est visible au d√©but
        if (this.loadingScreen) {
            this.loadingScreen.classList.remove('hidden');
            this.loadingScreen.style.display = 'flex';
            this.loadingScreen.style.opacity = '1';
            console.log('üîÑ Loading screen initialis√©');
        }

        // Cr√©er l'effet d'explosion de particules
        this.createExplosionParticles();

        // Animer le texte de chargement
        this.animateLoadingText();

        // S√©curit√© : forcer le masquage apr√®s le temps maximum
        this.setupFailsafe();
    }

    // M√©thode pour activer le mode popup (temps d'attente plus long)
    enablePopupMode() {
        this.popupMode = true;
        this.minLoadingTime = 2500; // Temps minimum plus long pour le popup

        // Red√©marrer l'animation du texte avec les nouveaux messages
        if (this.textInterval) {
            clearInterval(this.textInterval);
        }
        this.animateLoadingText();

        console.log('üåç Mode popup activ√© - temps de loading √©tendu');
    }

    // M√©thode pour d√©sactiver le mode popup
    disablePopupMode() {
        this.popupMode = false;
        this.minLoadingTime = 1500; // Retour au temps normal
        console.log('üåç Mode popup d√©sactiv√© - temps de loading normal');
    }

    setupFailsafe() {
        // Failsafe pour √©viter que le loading screen reste √† l'infini
        setTimeout(() => {
            if (!this.isHidden) {
                console.warn('‚ö†Ô∏è Loading screen failsafe activ√© - masquage forc√©');
                this.forceHide();
            }
        }, this.maxLoadingTime);
    }

    createExplosionParticles() {
        if (!this.explosion) return;

        const particleCount = 20;

        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'explosion-particle';

            // Position al√©atoire autour du centre
            const angle = (i / particleCount) * Math.PI * 2;
            const distance = 50 + Math.random() * 100;
            const x = Math.cos(angle) * distance;
            const y = Math.sin(angle) * distance;

            particle.style.cssText = `
                position: absolute;
                width: 3px;
                height: 3px;
                background: var(--color-primary);
                border-radius: 50%;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
                animation: explodeParticle 3s ease-out infinite;
                animation-delay: ${Math.random() * 2}s;
            `;

            // Variables CSS custom pour l'animation
            particle.style.setProperty('--final-x', `${x}px`);
            particle.style.setProperty('--final-y', `${y}px`);

            this.explosion.appendChild(particle);
        }

        // Ajouter les keyframes si elles n'existent pas
        if (!document.querySelector('#explosion-keyframes')) {
            const style = document.createElement('style');
            style.id = 'explosion-keyframes';
            style.textContent = `
                @keyframes explodeParticle {
                    0% {
                        opacity: 1;
                        transform: translate(-50%, -50%) scale(1);
                    }
                    100% {
                        opacity: 0;
                        transform: translate(
                            calc(-50% + var(--final-x)), 
                            calc(-50% + var(--final-y))
                        ) scale(0.5);
                    }
                }
            `;
            document.head.appendChild(style);
        }
    }

    animateLoadingText() {
        if (!this.loadingText) return;

        const normalTexts = [
            'Gathering particles...',
            'Initializing quantum fields...',
            'Calibrating neural networks...',
            'Loading portfolio data...',
            'Almost ready...'
        ];

        const popupTexts = [
            'Gathering particles...',
            'Preparing language selection...',
            'Initializing interface...',
            'Getting ready for you...',
            'Almost there...'
        ];

        const texts = this.popupMode ? popupTexts : normalTexts;
        let currentIndex = 0;

        const changeText = () => {
            if (this.isHidden) return;

            this.loadingText.style.opacity = '0';

            setTimeout(() => {
                if (this.isHidden) return;
                currentIndex = (currentIndex + 1) % texts.length;
                this.loadingText.textContent = texts[currentIndex];
                this.loadingText.style.opacity = '1';
            }, 300);
        };

        // Changer le texte toutes les 600ms (plus rapide)
        this.textInterval = setInterval(changeText, 600);
    }

    // M√©thode principale pour masquer le loading screen
    async hide() {
        // √âviter les appels multiples
        if (this.hidePromise) {
            return this.hidePromise;
        }

        if (this.isHidden) {
            return Promise.resolve();
        }

        console.log('üîÑ D√©but du masquage du loading screen...');

        this.hidePromise = this._performHide();
        return this.hidePromise;
    }

    async _performHide() {
        const elapsedTime = Date.now() - this.startTime;
        const remainingTime = Math.max(0, this.minLoadingTime - elapsedTime);

        // Attendre le temps minimum si n√©cessaire
        if (remainingTime > 0) {
            console.log(`‚è±Ô∏è Attente de ${remainingTime}ms pour respecter le temps minimum`);
            await new Promise(resolve => setTimeout(resolve, remainingTime));
        }

        return this._hideNow();
    }

    // M√©thode pour masquer imm√©diatement (utilis√©e par le failsafe)
    forceHide() {
        if (this.isHidden) return;

        console.log('‚ö° Masquage forc√© du loading screen');
        this._hideNow();
    }

    _hideNow() {
        return new Promise((resolve) => {
            this.isHidden = true;

            // Arr√™ter les animations
            if (this.textInterval) {
                clearInterval(this.textInterval);
                this.textInterval = null;
            }

            // Animation de fermeture
            if (this.loadingScreen) {
                console.log('‚úÖ Masquage du loading screen en cours...');

                // Effet de fade out
                this.loadingScreen.style.transition = 'opacity 0.8s ease-in-out';
                this.loadingScreen.style.opacity = '0';

                // Ajouter la classe hidden apr√®s l'animation
                setTimeout(() => {
                    if (this.loadingScreen) {
                        this.loadingScreen.classList.add('hidden');
                        this.loadingScreen.style.display = 'none';
                        console.log('‚úÖ Loading screen compl√®tement masqu√©');
                    }
                    resolve();
                }, 800); // Correspond √† la dur√©e de transition CSS
            } else {
                resolve();
            }
        });
    }

    // M√©thode pour forcer l'affichage (debug)
    show() {
        this.isHidden = false;
        this.hidePromise = null;
        this.startTime = Date.now(); // Reset du timer

        if (this.loadingScreen) {
            this.loadingScreen.classList.remove('hidden');
            this.loadingScreen.style.opacity = '1';
            this.loadingScreen.style.display = 'flex';
            this.loadingScreen.style.transition = '';

            // Red√©marrer l'animation du texte
            if (!this.textInterval) {
                this.animateLoadingText();
            }

            console.log('üîÑ Loading screen r√©affich√©');
        }

        // Red√©marrer le failsafe
        this.setupFailsafe();
    }

    // V√©rifier si le loading screen est masqu√©
    get hidden() {
        return this.isHidden;
    }

    // Cleanup
    destroy() {
        // Arr√™ter les timers
        if (this.textInterval) {
            clearInterval(this.textInterval);
            this.textInterval = null;
        }

        // Masquer si n√©cessaire
        if (!this.isHidden) {
            this.forceHide();
        }

        // Supprimer du DOM
        if (this.loadingScreen && this.loadingScreen.parentNode) {
            this.loadingScreen.remove();
        }

        // Supprimer les styles ajout√©s
        const explosionStyles = document.querySelector('#explosion-keyframes');
        if (explosionStyles) {
            explosionStyles.remove();
        }

        console.log('üßπ LoadingScreenManager d√©truit');
    }

    // M√©thodes utilitaires pour debug
    getStatus() {
        return {
            isHidden: this.isHidden,
            elapsedTime: Date.now() - this.startTime,
            minLoadingTime: this.minLoadingTime,
            maxLoadingTime: this.maxLoadingTime,
            hasHidePromise: !!this.hidePromise,
            hasTextInterval: !!this.textInterval
        };
    }

    // M√©thode pour ajuster les timings si n√©cessaire
    setTimings(minTime, maxTime) {
        this.minLoadingTime = minTime;
        this.maxLoadingTime = maxTime;
        console.log(`‚öôÔ∏è Timings mis √† jour: min=${minTime}ms, max=${maxTime}ms`);
    }
}